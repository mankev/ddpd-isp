<?php

/**
 * @file
 * Contains webform_prepopulate.module.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\webform_prepopulate\WebformPrepopulateUtils;
use Drupal\webform\Entity\Webform;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Environment;

/**
 * Implements hook_help().
 */
function webform_prepopulate_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the webform_prepopulate module.
    case 'help.page.webform_prepopulate':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Pre-populate a Webform with an external data source without disclosing information in the URL.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function webform_prepopulate_form_webform_settings_form_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $formObject */
  $formObject = $form_state->getFormObject();
  /** @var \Drupal\webform\Entity\Webform $webformEntity */
  $webformEntity = $formObject->getEntity();
  $webformPrepopulateSettings = $webformEntity->getThirdPartySettings('webform_prepopulate');
  $formPrepopulateWeight = (int) $form['form_behaviors']['form_prepopulate']['#weight'];

  /** @var \Drupal\webform_prepopulate\WebformPrepopulateStorage $webformPrepopulateStorage */
  $webformPrepopulateStorage = \Drupal::service('webform_prepopulate.storage');
  $numberEntries = $webformPrepopulateStorage->countDataEntries($webformEntity->id());
  // @todo add a link to the csv documentation.
  $entriesMessage = t('There are not prepopulate data available yet for this Webform, upload a csv file.');
  if (!empty($numberEntries)) {
    $entriesMessage = t('There are %num_entries entries available for this Webform. @link.', [
      '%num_entries' => $numberEntries,
      '@link' => $webformPrepopulateStorage->getListFormLink($webformEntity->id()),
    ]);
  }

  // A local action is used to point to the entity.webform.settings_form route.
  // It is extended by the PrepopulateSettingsLocalAction plugin.
  $form['form_behaviors']['form_prepopulate']['#prefix'] = '<a name="prepopulate"> </a>';

  $form['form_behaviors']['form_prepopulate_file'] = [
    '#type' => 'fieldset',
    '#title' => t('Prepopulate with a file'),
    '#states' => [
      'visible' => [
        ':input[name="form_prepopulate"]' => ['checked' => TRUE],
      ],
    ],
    '#weight' => ++$formPrepopulateWeight,
  ];

  $form['form_behaviors']['form_prepopulate_file']['form_prepopulate_enable_file'] = [
    '#type' => 'checkbox',
    '#suffix' => $entriesMessage,
    '#title' => t('Enable prepopulate elements from a file data source.'),
    '#description' => t('Upload a file to insert or replace prepopulate data. The file is converted as a database storage then deleted.'),
    '#default_value' => isset($webformPrepopulateSettings['form_prepopulate_enable_file']) ? $webformPrepopulateSettings['form_prepopulate_enable_file'] : FALSE,
    '#states' => [
      'visible' => [
        ':input[name="form_prepopulate"]' => ['checked' => TRUE],
      ],
    ],
    '#weight' => ++$formPrepopulateWeight,
  ];

  $form['form_behaviors']['form_prepopulate_file']['delete_data_on_webform_close'] = [
    '#type' => 'checkbox',
    '#title' => t('Delete data when the Webform is closed.'),
    '#description' => t('Data can be deleted manually, anytime. Check this option to delete them automatically when the Webform is marked as "closed".'),
    '#default_value' => isset($webformPrepopulateSettings['delete_data_on_webform_close']) ? $webformPrepopulateSettings['delete_data_on_webform_close'] : FALSE,
    '#states' => [
      'visible' => [
        ':input[name="form_prepopulate_enable_file"]' => ['checked' => TRUE],
      ],
    ],
    '#weight' => ++$formPrepopulateWeight,
  ];

  $form['form_behaviors']['form_prepopulate_file']['disable_hash_access_limit'] = [
    '#type' => 'checkbox',
    '#title' => t('Disable access limit for prepopulating a Webform.'),
    '#description' => t('There is a limit to @hash_limit different prepopulate entries to avoid information disclosure. This should be used for testing as anonymous only. Preferably use the <em>Bypass webform prepopulate hash access limit</em> permission for trusted roles.', [
      '@hash_limit' => WebformPrepopulateUtils::MAX_HASH_ACCESS,
    ]),
    '#default_value' => isset($webformPrepopulateSettings['disable_hash_access_limit']) ? $webformPrepopulateSettings['disable_hash_access_limit'] : FALSE,
    '#states' => [
      'visible' => [
        ':input[name="form_prepopulate_enable_file"]' => ['checked' => TRUE],
      ],
    ],
    '#weight' => ++$formPrepopulateWeight,
  ];

  $form['form_behaviors']['form_prepopulate_file']['csv_delimiter'] = [
    '#type' => 'radios',
    '#title' => t('CSV delimiter'),
    '#options' => [',' => 'Comma (,)', ';' => 'Semicolon (;)', '|' => 'Pipe (|)'],
    '#default_value' => isset($webformPrepopulateSettings['csv_delimiter']) ? $webformPrepopulateSettings['csv_delimiter'] : ',',
    '#states' => [
      'visible' => [
        ':input[name="form_prepopulate_enable_file"]' => ['checked' => TRUE],
      ],
    ],
    '#weight' => ++$formPrepopulateWeight,
  ];

  // States for managed_file
  // https://www.drupal.org/project/drupal/issues/2847425
  // Description for managed_file
  // https://www.drupal.org/project/drupal/issues/1744226
  $validators = [
    // @todo improve by adding other extensions
    'file_validate_extensions' => ['csv'],
    'file_validate_size' => [Environment::getUploadMaxSize()],
  ];
  $form['form_behaviors']['form_prepopulate_file']['form_prepopulate_file'] = [
    '#type' => 'managed_file',
    '#title' => t('Add or replace prepopulate data'),
    '#upload_location' => 'temporary://webform_prepopulate',
    '#upload_validators' => $validators,
    '#states' => [
      'visible' => [
        ':input[name="form_prepopulate"]' => ['checked' => TRUE],
        ':input[name="form_prepopulate_enable_file"]' => ['checked' => TRUE],
      ],
      'required' => [
        ':input[name="form_prepopulate_enable_file"]' => ['checked' => TRUE],
      ],
    ],
    '#weight' => ++$formPrepopulateWeight,
  ];

  $form['#entity_builders'][] = '_webform_prepopulate_webform_settings_add_form_builder';
  $form['#validate'][] = '_webform_prepopulate_settings_validate';
}

/**
 * Entity builder for the Webform configuration entity.
 *
 * Stores the flag that tells the Webform to use prepopulate from a file source.
 *
 * @param string $entity_type
 * @param \Drupal\webform\Entity\Webform $webform
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _webform_prepopulate_webform_settings_add_form_builder($entity_type, Webform $webform, array &$form, FormStateInterface $form_state) {
  _webform_prepopulate_handle_third_party_setting('form_prepopulate_enable_file', 'form_prepopulate_enable_file', $webform, $form_state);
  _webform_prepopulate_handle_third_party_setting('disable_hash_access_limit', 'disable_hash_access_limit', $webform, $form_state);
  _webform_prepopulate_handle_third_party_setting('delete_data_on_webform_close', 'delete_data_on_webform_close', $webform, $form_state);
  _webform_prepopulate_handle_third_party_setting('csv_delimiter', 'csv_delimiter', $webform, $form_state);
}

/**
 * Handle a setting on a Webform configuration entity for a form value.
 *
 * @param string $setting
 * @param string $form_key
 * @param \Drupal\webform\Entity\Webform $webform
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _webform_prepopulate_handle_third_party_setting($setting, $form_key, Webform $webform, FormStateInterface $form_state) {
  if ($form_state->getValue($form_key)) {
    $webform->setThirdPartySetting('webform_prepopulate', $setting, $form_state->getValue($form_key));
  }
  else {
    $webform->unsetThirdPartySetting('webform_prepopulate', $setting);
  }
}

/**
 * Validation callback that checks if a file must be saved.
 *
 * The file is converted in a database storage then deleted to prevent
 * access from the outside. Also configuration entity is not a safe storage
 * for the file id as _webform_prepopulate_webform_settings_add_form_builder()
 * is called several times and the value could not be overwritten safely then.
 * Performance wise, while reading prepopulate data, a db is also
 * a better option.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function _webform_prepopulate_settings_validate(array $form, FormStateInterface &$form_state) {
  if ($form_state->getValue('form_prepopulate_file')) {
    try {
      $prepopulate_file = $form_state->getValue('form_prepopulate_file');
      if (isset($prepopulate_file[0]) && !empty($prepopulate_file[0])) {
        /** @var \Drupal\Core\Entity\EntityFormInterface $formObject */
        $formObject = $form_state->getFormObject();
        /** @var \Drupal\webform\Entity\Webform $webformEntity */
        $webformEntity = $formObject->getEntity();
        /** @var \Drupal\webform_prepopulate\WebformPrepopulateStorage $webformPrepopulateStorage */
        $webformPrepopulateStorage = \Drupal::service('webform_prepopulate.storage');
        $delimiter = $form_state->getValue('csv_delimiter');
        $webformPrepopulateStorage->setDelimiter($delimiter);
        $webformPrepopulateStorage->persistWebformDataFromFile($prepopulate_file[0], $webformEntity->id());
      }
    }
    catch (EntityStorageException $exception) {
      $form_state->setErrorByName('form_prepopulate_file', $exception->getMessage());
    }
  }
}

/**
 * Implements hook_webform_submission_form_alter().
 *
 * Prepopulates the Webform if the conditions are met.
 */
function webform_prepopulate_webform_submission_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\webform_prepopulate\WebformPrepopulateUtils $utils */
  $utils = \Drupal::service('webform_prepopulate.utils');
  $hash = \Drupal::request()->query->get('hash');
  if (
    $utils->isFilePrepopulateEnabled($form['#webform_id']) &&
    !empty($hash) &&
    !empty($form['#webform_id'])
  ) {
    // If there are too many access to several hashes, do not prepopulate.
    if ($utils->hasHashAccess($hash, $form['#webform_id'])) {
      /** @var \Drupal\webform_prepopulate\WebformPrepopulateStorage $webformPrepopulateStorage */
      $webformPrepopulateStorage = \Drupal::service('webform_prepopulate.storage');
      $values = $webformPrepopulateStorage->getDataFromHash($hash, $form['#webform_id']);
      // Retain only Webform elements that have the same keys.
      $intersectKeys = array_intersect_key($values, $form['elements']);
      foreach ($intersectKeys as $elementKey => $elementValue) {
        // Override only if the form element default value is empty.
        if (empty($form['elements'][$elementKey]['#default_value'])) {
          $form['elements'][$elementKey]['#default_value'] = $values[$elementKey];
        }
      }
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Checks if prepopulate data must be removed on Webform close.
 * This could be triggered on Webform settings save instead but is
 * more tolerant to configuration errors this way as it is not
 * immediately executed.
 */
function webform_prepopulate_cron() {
  /** @var \Drupal\webform_prepopulate\WebformPrepopulateUtils $utils */
  $utils = \Drupal::service('webform_prepopulate.utils');
  /** @var \Drupal\webform_prepopulate\WebformPrepopulateStorage $webformPrepopulateStorage */
  $webformPrepopulateStorage = \Drupal::service('webform_prepopulate.storage');
  foreach ($utils->getWebformEntities() as $webform) {
    if ($utils->deleteDataOnClose($webform->id()) && $webform->isClosed()) {
      if ($webformPrepopulateStorage->deleteWebformData($webform->id())) {
        \Drupal::logger('webform_prepopulate')->info(t(
          'Deleted prepopulate data for Webform @webform_id.', [
            '@webform_id' => $webform->id(),
          ]
        ));
      }
    }
  }
}
